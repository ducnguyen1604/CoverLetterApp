import requests
import json
import os

# Load API keys from config.json
def load_api_key():
    try:
        with open("config.json", "r") as config_file:
            config = json.load(config_file)
            return config.get("google_api_key")
    except FileNotFoundError:
        return None

def generate_prompt(sections, job_description):
    """
    Create a prompt for the Gemini API based on extracted CV information and job description.
    """
    prompt = f"""
    You are an expert in writing professional cover letters. Based on the following CV and job description, 
    generate a cover letter highlighting relevant skills aligned with the job description.

    CV Information:
    - Education: {sections['Education']}
    - Experience: {sections['Experience']}
    - Projects: {sections['Projects']}
    - Achievements: {sections['Achievements']}
    - Skills: {sections['Skills']}

    Job Description:
    {job_description}

    Provide a professional cover letter.
    """
    return prompt

def call_google_gemini_api(prompt):
    """
    Call the Google Gemini API to generate content based on the prompt.
    """
    api_key = load_api_key()
    if not api_key:
        return "API key not found. Please ensure it is stored in config.json."

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ]
    }

    try:
        response = requests.post(api_url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()

        # Extract the generated text from the response
        candidates = result.get("candidates", [])
        if candidates and "content" in candidates[0]:
            parts = candidates[0]["content"].get("parts", [])
            return "".join(part.get("text", "") for part in parts)
        else:
            return "No content generated by the model."

    except requests.exceptions.RequestException as e:
        return f"An error occurred while calling the Gemini API: {e}"

# Example Usage
if __name__ == "__main__":
    sections = {
        "Education": "BSc in Computer Science",
        "Experience": "3 years at XYZ Inc.",
        "Projects": "AI-powered chatbot",
        "Achievements": "Best Employee 2022",
        "Skills": "Python, AI, NLP"
    }
    job_description = "Looking for an AI developer with Python expertise."

    prompt = generate_prompt(sections, job_description)
    cover_letter = call_google_gemini_api(prompt)
    print(cover_letter)
